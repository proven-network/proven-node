{"version":3,"file":"rpc-worker.js","sources":["rpc-worker.ts"],"sourcesContent":["/// <reference lib=\"webworker\" />\n\nconst INACTIVITY_TIMEOUT = 60000; // 60 seconds in milliseconds\nconst CHECK_INTERVAL = 5000; // 5 seconds in milliseconds\n\ntype WorkerMessage = {\n  type: 'send';\n  nonce: number;\n  data: Uint8Array;\n};\n\nclass RpcWorker {\n  ws: WebSocket | null;\n  ports: Set<MessagePort>;\n  lastActivity: number;\n  timeoutChecker: number | null;\n  intentionallyClosed: boolean;\n  pendingRequests: Map<number, MessagePort>;\n  httpEndpoint: string;\n  wsEndpoint: string;\n\n  constructor() {\n    this.ws = null;\n    this.ports = new Set();\n    this.lastActivity = Date.now();\n    this.timeoutChecker = null;\n    this.intentionallyClosed = false;\n    this.pendingRequests = new Map();\n\n    const query = globalThis.location.search;\n    const host = globalThis.location.host;\n    const path = globalThis.location.pathname;\n    const applicationId = path.split('/')[2];\n\n    this.httpEndpoint = `http://${host}/app/${applicationId}/rpc/http${query}`;\n    this.wsEndpoint = `ws://${host}/app/${applicationId}/rpc/ws${query}`;\n\n    this.startTimeoutChecker();\n  }\n\n  initWebSocket() {\n    if (this.ws?.readyState === WebSocket.OPEN || this.intentionallyClosed) return;\n\n    this.ws = new WebSocket(this.wsEndpoint);\n    this.ws.binaryType = 'arraybuffer';\n    this.updateLastActivity();\n    this.intentionallyClosed = false;\n\n    this.ws.onmessage = (event) => {\n      this.updateLastActivity();\n      this.handleWebSocketMessage(event.data);\n    };\n\n    this.ws.onclose = () => {\n      console.log('WebSocket connection closed');\n      this.ws = null;\n      // Only reconnect if closure wasn't intentional\n      if (!this.intentionallyClosed) {\n        setTimeout(() => this.initWebSocket(), 1000);\n      }\n    };\n\n    this.ws.onerror = (error) => {\n      console.error('WebSocket error:', error);\n    };\n  }\n\n  handleWebSocketMessage(data: ArrayBuffer) {\n    // Forward the binary message to all connected ports\n    this.ports.forEach((port) => {\n      port.postMessage({\n        type: 'ws-message',\n        data: data,\n      });\n    });\n  }\n\n  async sendViaHttp(data: Uint8Array, nonce: number): Promise<void> {\n    try {\n      const response = await fetch(this.httpEndpoint, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/octet-stream',\n        },\n        body: data,\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n\n      const responseData = await response.arrayBuffer();\n\n      // Send response back to the requesting port\n      const port = this.pendingRequests.get(nonce);\n      if (port) {\n        port.postMessage({\n          type: 'http-response',\n          nonce: nonce,\n          data: responseData,\n        });\n        this.pendingRequests.delete(nonce);\n      }\n    } catch (error) {\n      console.error('HTTP request failed:', error);\n\n      // Send error back to the requesting port\n      const port = this.pendingRequests.get(nonce);\n      if (port) {\n        port.postMessage({\n          type: 'http-error',\n          nonce: nonce,\n          error: error instanceof Error ? error.message : 'Unknown error',\n        });\n        this.pendingRequests.delete(nonce);\n      }\n    }\n  }\n\n  sendViaWebSocket(data: Uint8Array) {\n    this.intentionallyClosed = false; // Reset the flag when attempting to send\n    if (!this.ws || this.ws.readyState !== WebSocket.OPEN) {\n      this.initWebSocket();\n    }\n\n    // Wait for connection to be ready\n    const sendWhenReady = () => {\n      if (this.ws?.readyState === WebSocket.OPEN) {\n        this.updateLastActivity();\n        this.ws.send(data);\n      } else if (!this.intentionallyClosed) {\n        // Retry after a short delay\n        setTimeout(sendWhenReady, 100);\n      }\n    };\n\n    sendWhenReady();\n  }\n\n  updateLastActivity() {\n    this.lastActivity = Date.now();\n  }\n\n  startTimeoutChecker() {\n    this.timeoutChecker = setInterval(() => {\n      if (Date.now() - this.lastActivity > INACTIVITY_TIMEOUT) {\n        this.closeWebSocketConnection();\n      }\n    }, CHECK_INTERVAL) as unknown as number;\n  }\n\n  closeWebSocketConnection() {\n    if (this.ws) {\n      this.intentionallyClosed = true;\n      this.ws.close();\n      this.ws = null;\n    }\n  }\n\n  async handlePortMessage(port: MessagePort, data: any) {\n    if (data.type === 'send') {\n      const message = data as WorkerMessage;\n\n      // Store which port sent this request for response routing\n      this.pendingRequests.set(message.nonce, port);\n\n      // Decide transport: use WebSocket if already open, otherwise use HTTP\n      if (this.ws?.readyState === WebSocket.OPEN) {\n        console.debug('RPC: Using WebSocket transport (already open)');\n        this.sendViaWebSocket(message.data);\n      } else {\n        console.debug('RPC: Using HTTP transport');\n        await this.sendViaHttp(message.data, message.nonce);\n      }\n    }\n  }\n}\n\nconst worker = new RpcWorker();\n\nself.addEventListener('connect', (event: Event) => {\n  const connectEvent = event as MessageEvent;\n  const port = connectEvent.ports[0];\n\n  worker.ports.add(port);\n  worker.updateLastActivity();\n\n  port.onmessage = (e) => {\n    worker.handlePortMessage(port, e.data);\n  };\n\n  port.onmessageerror = (e) => {\n    console.error('Port message error:', e);\n  };\n\n  // Clean up when port is closed\n  port.addEventListener('close', () => {\n    worker.ports.delete(port);\n  });\n\n  port.start();\n});\n"],"names":["RpcWorker","__publicField","query","host","applicationId","_a","event","error","data","port","nonce","response","responseData","sendWhenReady","message","worker","e"],"mappings":"oKAWA,MAAMA,CAAU,CAUd,aAAc,CATdC,EAAA,WACAA,EAAA,cACAA,EAAA,qBACAA,EAAA,uBACAA,EAAA,4BACAA,EAAA,wBACAA,EAAA,qBACAA,EAAA,mBAGE,KAAK,GAAK,KACV,KAAK,UAAY,IACjB,KAAK,aAAe,KAAK,IAAA,EACzB,KAAK,eAAiB,KACtB,KAAK,oBAAsB,GAC3B,KAAK,oBAAsB,IAE3B,MAAMC,EAAQ,WAAW,SAAS,OAC5BC,EAAO,WAAW,SAAS,KAE3BC,EADO,WAAW,SAAS,SACN,MAAM,GAAG,EAAE,CAAC,EAEvC,KAAK,aAAe,UAAUD,CAAI,QAAQC,CAAa,YAAYF,CAAK,GACxE,KAAK,WAAa,QAAQC,CAAI,QAAQC,CAAa,UAAUF,CAAK,GAElE,KAAK,oBAAA,CACP,CAEA,eAAgB,CAtClB,IAAAG,IAuCQA,EAAA,KAAK,KAAL,YAAAA,EAAS,cAAe,UAAU,MAAQ,KAAK,sBAEnD,KAAK,GAAK,IAAI,UAAU,KAAK,UAAU,EACvC,KAAK,GAAG,WAAa,cACrB,KAAK,mBAAA,EACL,KAAK,oBAAsB,GAE3B,KAAK,GAAG,UAAaC,GAAU,CAC7B,KAAK,mBAAA,EACL,KAAK,uBAAuBA,EAAM,IAAI,CACxC,EAEA,KAAK,GAAG,QAAU,IAAM,CACtB,QAAQ,IAAI,6BAA6B,EACzC,KAAK,GAAK,KAEL,KAAK,qBACR,WAAW,IAAM,KAAK,cAAA,EAAiB,GAAI,CAE/C,EAEA,KAAK,GAAG,QAAWC,GAAU,CAC3B,QAAQ,MAAM,mBAAoBA,CAAK,CACzC,EACF,CAEA,uBAAuBC,EAAmB,CAExC,KAAK,MAAM,QAASC,GAAS,CAC3BA,EAAK,YAAY,CACf,KAAM,aACN,KAAAD,CAAA,CACD,CACH,CAAC,CACH,CAEA,MAAM,YAAYA,EAAkBE,EAA8B,CAChE,GAAI,CACF,MAAMC,EAAW,MAAM,MAAM,KAAK,aAAc,CAC9C,OAAQ,OACR,QAAS,CACP,eAAgB,0BAAA,EAElB,KAAMH,CAAA,CACP,EAED,GAAI,CAACG,EAAS,GACZ,MAAM,IAAI,MAAM,QAAQA,EAAS,MAAM,KAAKA,EAAS,UAAU,EAAE,EAGnE,MAAMC,EAAe,MAAMD,EAAS,YAAA,EAG9BF,EAAO,KAAK,gBAAgB,IAAIC,CAAK,EACvCD,IACFA,EAAK,YAAY,CACf,KAAM,gBACN,MAAAC,EACA,KAAME,CAAA,CACP,EACD,KAAK,gBAAgB,OAAOF,CAAK,EAErC,OAASH,EAAO,CACd,QAAQ,MAAM,uBAAwBA,CAAK,EAG3C,MAAME,EAAO,KAAK,gBAAgB,IAAIC,CAAK,EACvCD,IACFA,EAAK,YAAY,CACf,KAAM,aACN,MAAAC,EACA,MAAOH,aAAiB,MAAQA,EAAM,QAAU,eAAA,CACjD,EACD,KAAK,gBAAgB,OAAOG,CAAK,EAErC,CACF,CAEA,iBAAiBF,EAAkB,CACjC,KAAK,oBAAsB,IACvB,CAAC,KAAK,IAAM,KAAK,GAAG,aAAe,UAAU,OAC/C,KAAK,cAAA,EAIP,MAAMK,EAAgB,IAAM,CA5HhC,IAAAR,IA6HUA,EAAA,KAAK,KAAL,YAAAA,EAAS,cAAe,UAAU,MACpC,KAAK,mBAAA,EACL,KAAK,GAAG,KAAKG,CAAI,GACP,KAAK,qBAEf,WAAWK,EAAe,GAAG,CAEjC,EAEAA,EAAA,CACF,CAEA,oBAAqB,CACnB,KAAK,aAAe,KAAK,IAAA,CAC3B,CAEA,qBAAsB,CACpB,KAAK,eAAiB,YAAY,IAAM,CAClC,KAAK,IAAA,EAAQ,KAAK,aAAe,KACnC,KAAK,yBAAA,CAET,EAAG,GAAc,CACnB,CAEA,0BAA2B,CACrB,KAAK,KACP,KAAK,oBAAsB,GAC3B,KAAK,GAAG,MAAA,EACR,KAAK,GAAK,KAEd,CAEA,MAAM,kBAAkBJ,EAAmBD,EAAW,CA7JxD,IAAAH,EA8JI,GAAIG,EAAK,OAAS,OAAQ,CACxB,MAAMM,EAAUN,EAGhB,KAAK,gBAAgB,IAAIM,EAAQ,MAAOL,CAAI,IAGxCJ,EAAA,KAAK,KAAL,YAAAA,EAAS,cAAe,UAAU,MACpC,QAAQ,MAAM,+CAA+C,EAC7D,KAAK,iBAAiBS,EAAQ,IAAI,IAElC,QAAQ,MAAM,2BAA2B,EACzC,MAAM,KAAK,YAAYA,EAAQ,KAAMA,EAAQ,KAAK,EAEtD,CACF,CACF,CAEA,MAAMC,EAAS,IAAIf,EAEnB,KAAK,iBAAiB,UAAYM,GAAiB,CAEjD,MAAMG,EADeH,EACK,MAAM,CAAC,EAEjCS,EAAO,MAAM,IAAIN,CAAI,EACrBM,EAAO,mBAAA,EAEPN,EAAK,UAAaO,GAAM,CACtBD,EAAO,kBAAkBN,EAAMO,EAAE,IAAI,CACvC,EAEAP,EAAK,eAAkBO,GAAM,CAC3B,QAAQ,MAAM,sBAAuBA,CAAC,CACxC,EAGAP,EAAK,iBAAiB,QAAS,IAAM,CACnCM,EAAO,MAAM,OAAON,CAAI,CAC1B,CAAC,EAEDA,EAAK,MAAA,CACP,CAAC"}