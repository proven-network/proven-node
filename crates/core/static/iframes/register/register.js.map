{"version":3,"file":"register.js","sources":["../../../../../packages/common/src/helpers/bip32.ts","register.ts"],"sourcesContent":["import * as bip39 from '@scure/bip39';\nimport { wordlist } from '@scure/bip39/wordlists/english.js';\n\nexport const generateMnemonic = (secretBytes: Uint8Array): string[] => {\n  return bip39.entropyToMnemonic(secretBytes, wordlist).split(' ');\n};\n\nexport const mnemonicToSeed = (mnemonic: string[]): Uint8Array => {\n  if (mnemonic.length !== 24) {\n    throw new Error('Invalid mnemonic length');\n  }\n\n  return bip39.mnemonicToEntropy(mnemonic.join(' '), wordlist);\n};\n","/// <reference lib=\"DOM\" />\nimport { register } from '@proven-network/common';\nimport { generateMnemonic } from '@proven-network/common';\nimport { MessageBroker, getWindowIdFromUrl } from '@proven-network/common';\n\nclass RegisterClient {\n  broker: MessageBroker;\n  windowId: string;\n  username: string = '';\n  private currentScreen: 'registration' | 'seed' = 'registration';\n\n  constructor() {\n    // Extract window ID from URL fragment\n    this.windowId = getWindowIdFromUrl() || 'unknown';\n\n    // Initialize broker synchronously - will throw if it fails\n    this.broker = new MessageBroker(this.windowId, 'register');\n\n    this.initializeBroker();\n    this.setupEventListeners();\n  }\n\n  async initializeBroker() {\n    try {\n      await this.broker.connect();\n\n      console.debug('Register: Broker initialized successfully');\n    } catch (error) {\n      console.error('Register: Failed to initialize broker:', error);\n      throw new Error(\n        `Register: Failed to initialize broker: ${error instanceof Error ? error.message : 'Unknown error'}`\n      );\n    }\n  }\n\n  setupEventListeners() {\n    // Form submission\n    const form = document.getElementById('registration-form');\n    const cancelBtn = document.getElementById('cancel-btn');\n    const closeBtn = document.getElementById('close-modal');\n    const usernameInput = document.getElementById('username') as HTMLInputElement;\n\n    // Seed screen elements\n    const revealOverlay = document.getElementById('reveal-overlay');\n    const writtenDownBtn = document.getElementById('written-down-btn');\n    const remindLaterBtn = document.getElementById('remind-later-btn');\n\n    if (form) {\n      form.addEventListener('submit', (e) => this.handleRegistration(e));\n    }\n\n    if (cancelBtn) {\n      cancelBtn.addEventListener('click', () => this.closeModal());\n    }\n\n    if (closeBtn) {\n      closeBtn.addEventListener('click', () => this.closeModal());\n    }\n\n    if (revealOverlay) {\n      revealOverlay.addEventListener('click', () => this.revealSeedWords());\n    }\n\n    if (writtenDownBtn) {\n      writtenDownBtn.addEventListener('click', () => this.handleWrittenDown());\n    }\n\n    if (remindLaterBtn) {\n      remindLaterBtn.addEventListener('click', () => this.handleRemindLater());\n    }\n\n    // Auto-focus username input\n    if (usernameInput) {\n      usernameInput.focus();\n    }\n\n    // Close modal on Escape key\n    document.addEventListener('keydown', (event) => {\n      if (event.key === 'Escape') {\n        this.closeModal();\n      }\n    });\n\n    // Close modal when clicking on background\n    document.body.addEventListener('click', (event) => {\n      // Only close if clicking directly on the body (background), not on the modal\n      if (event.target === document.body) {\n        this.closeModal();\n      }\n    });\n  }\n\n  showScreen(screen: 'registration' | 'seed') {\n    const registrationScreen = document.getElementById('registration-screen');\n    const seedScreen = document.getElementById('seed-screen');\n    const modal = document.getElementById('modal');\n\n    if (registrationScreen && seedScreen && modal) {\n      // Remove active class from all screens\n      registrationScreen.classList.remove('active');\n      seedScreen.classList.remove('active');\n\n      // Add active class to target screen\n      if (screen === 'registration') {\n        registrationScreen.classList.add('active');\n        modal.classList.remove('seed-screen');\n      } else {\n        seedScreen.classList.add('active');\n        modal.classList.add('seed-screen');\n      }\n\n      this.currentScreen = screen;\n    }\n  }\n\n  showError(message: string) {\n    const errorEl = document.getElementById('error-message');\n    if (errorEl) {\n      errorEl.textContent = message;\n      errorEl.style.display = 'block';\n    }\n  }\n\n  hideError() {\n    const errorEl = document.getElementById('error-message');\n    if (errorEl) {\n      errorEl.style.display = 'none';\n    }\n  }\n\n  setLoading(loading: boolean) {\n    const createBtn = document.getElementById('create-btn') as HTMLButtonElement;\n    const cancelBtn = document.getElementById('cancel-btn') as HTMLButtonElement;\n\n    if (createBtn && cancelBtn) {\n      if (loading) {\n        createBtn.innerHTML = '<span class=\"loading-spinner\"></span>Creating Account...';\n        createBtn.disabled = true;\n        cancelBtn.disabled = true;\n      } else {\n        createBtn.innerHTML = 'Create Account';\n        createBtn.disabled = false;\n        cancelBtn.disabled = false;\n      }\n    }\n  }\n\n  revealSeedWords() {\n    const revealOverlay = document.getElementById('reveal-overlay');\n    const seedWordsGrid = document.getElementById('seed-words-grid');\n\n    if (revealOverlay) {\n      revealOverlay.style.display = 'none';\n    }\n\n    if (seedWordsGrid) {\n      seedWordsGrid.classList.remove('blurred');\n    }\n  }\n\n  generateAndDisplaySeedWords(prfResult: Uint8Array) {\n    try {\n      // Generate 24-word mnemonic from PRF result\n      const seedWords = generateMnemonic(prfResult);\n\n      // Display the words in the grid\n      const seedWordsGrid = document.getElementById('seed-words-grid');\n      if (seedWordsGrid) {\n        seedWordsGrid.innerHTML = '';\n        seedWordsGrid.classList.add('blurred'); // Start with blur effect\n\n        seedWords.forEach((word, index) => {\n          const wordElement = document.createElement('div');\n          wordElement.className = 'seed-word';\n\n          const numberElement = document.createElement('span');\n          numberElement.className = 'seed-word-number';\n          numberElement.textContent = `${index + 1}.`;\n\n          const textElement = document.createElement('span');\n          textElement.className = 'seed-word-text';\n          textElement.textContent = word;\n\n          wordElement.appendChild(numberElement);\n          wordElement.appendChild(textElement);\n          seedWordsGrid.appendChild(wordElement);\n        });\n      }\n    } catch (error) {\n      console.error('Error generating seed words:', error);\n      this.showError('Failed to generate recovery seed. Please try again.');\n    }\n  }\n\n  handleWrittenDown() {\n    console.debug(\"User confirmed they've written down the seed words\");\n    this.closeModal();\n  }\n\n  handleRemindLater() {\n    console.debug('User chose to be reminded later about seed words');\n    // For now, just close the modal\n    // TODO: Implement reminder functionality\n    this.closeModal();\n  }\n\n  closeModal() {\n    // Send message directly to sdk via broker\n    this.broker.send('close_registration_modal', null, 'sdk');\n  }\n\n  async handleRegistration(event: Event) {\n    event.preventDefault();\n    this.hideError();\n\n    const usernameInput = document.getElementById('username') as HTMLInputElement;\n    this.username = usernameInput.value.trim();\n\n    if (!this.username) {\n      this.showError('Please enter a username');\n      usernameInput.focus();\n      return;\n    }\n\n    if (this.username.length < 3) {\n      this.showError('Username must be at least 3 characters');\n      usernameInput.focus();\n      return;\n    }\n\n    if (!/^[a-zA-Z0-9_-]+$/.test(this.username)) {\n      this.showError('Username can only contain letters, numbers, underscore, and dash');\n      usernameInput.focus();\n      return;\n    }\n\n    this.setLoading(true);\n\n    try {\n      // Call WebAuthn registration with the username - returns PRF result\n      const prfResult = await register(this.username);\n\n      console.debug('Registration successful for username:', this.username);\n\n      // Send success message with PRF result directly to button iframe via broker\n      await this.broker.send(\n        'registration_complete',\n        {\n          success: true,\n          username: this.username,\n          prfResult: prfResult,\n        },\n        'connect'\n      );\n\n      // Generate and display seed words, then show seed screen\n      this.generateAndDisplaySeedWords(prfResult);\n      this.showScreen('seed');\n    } catch (error) {\n      console.error('Registration error:', error);\n\n      let errorMessage = 'Registration failed';\n      if ((error as Error).name === 'NotAllowedError') {\n        errorMessage = 'Registration was cancelled';\n      } else if ((error as Error).message) {\n        errorMessage = (error as Error).message;\n      }\n\n      this.showError(errorMessage);\n    } finally {\n      this.setLoading(false);\n    }\n  }\n\n  // Initialize the client when the page loads\n  static init() {\n    const client = new RegisterClient();\n\n    // Make client available globally for debugging\n    (globalThis as any).registerClient = client;\n  }\n}\n\n// Initialize when the page loads\nif (globalThis.addEventListener) {\n  globalThis.addEventListener('DOMContentLoaded', RegisterClient.init);\n} else {\n  // Fallback for cases where DOMContentLoaded has already fired\n  RegisterClient.init();\n}\n"],"names":["generateMnemonic","secretBytes","bip39.entropyToMnemonic","wordlist","RegisterClient","__publicField","getWindowIdFromUrl","MessageBroker","error","form","cancelBtn","closeBtn","usernameInput","revealOverlay","writtenDownBtn","remindLaterBtn","e","event","screen","registrationScreen","seedScreen","modal","message","errorEl","loading","createBtn","seedWordsGrid","prfResult","seedWords","word","index","wordElement","numberElement","textElement","register","errorMessage","client"],"mappings":"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"}