{"version":3,"file":"webauthn.js","sources":["../../../packages/common/src/helpers/uint8array.ts","../../../packages/common/src/helpers/webauthn.ts"],"sourcesContent":["// Helper functions for Base64URL encoding/decoding\nexport function base64UrlToUint8Array(base64Url: string): Uint8Array {\n  // Add padding if needed\n  const padding = '='.repeat((4 - (base64Url.length % 4)) % 4);\n  // Convert URL-safe characters back to standard Base64\n  const base64 = (base64Url + padding).replace(/-/g, '+').replace(/_/g, '/');\n\n  try {\n    const raw = window.atob(base64);\n    const buffer = new Uint8Array(raw.length);\n    for (let i = 0; i < raw.length; i++) {\n      buffer[i] = raw.charCodeAt(i);\n    }\n    return buffer;\n  } catch (e) {\n    console.error('Failed to decode Base64URL:', base64Url, e);\n    throw e;\n  }\n}\n\nexport function uint8ArrayToBase64Url(buffer: ArrayBuffer): string {\n  const base64 = window.btoa(String.fromCharCode(...new Uint8Array(buffer)));\n  return base64.replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=/g, '');\n}\n","import { base64UrlToUint8Array, uint8ArrayToBase64Url } from './uint8array';\n\n// Fields that should be converted from Base64URL to ArrayBuffer\nconst BASE64URL_FIELDS = new Set([\n  'publicKey.challenge',\n  'publicKey.user.id',\n  'publicKey.extensions.prf.eval.first',\n]);\n\n// Special handling for array fields that contain Base64URL data\nconst ARRAY_BASE64URL_FIELDS = new Set([\n  'publicKey.allowCredentials',\n  'publicKey.excludeCredentials',\n]);\n\n// Deeply converts objects with Base64URL strings to ArrayBuffers\nfunction convertOptionsToBuffer(obj: any, path: string[] = []): any {\n  if (typeof obj === 'string') {\n    // Get the full path\n    const fullPath = path.join('.');\n\n    // Only convert if the full path matches one of our specified paths\n    if (BASE64URL_FIELDS.has(fullPath)) {\n      try {\n        return base64UrlToUint8Array(obj);\n      } catch (e) {\n        console.warn(`Failed to convert ${fullPath} to ArrayBuffer:`, e);\n        return obj;\n      }\n    }\n    return obj;\n  } else if (Array.isArray(obj)) {\n    // Special handling for credential arrays\n    const fullPath = path.join('.');\n    if (ARRAY_BASE64URL_FIELDS.has(fullPath)) {\n      // This is an array of credential descriptors\n      return obj.map((item) => {\n        if (item && typeof item === 'object' && item.id) {\n          try {\n            return {\n              ...item,\n              id: base64UrlToUint8Array(item.id),\n            };\n          } catch (e) {\n            console.warn(`Failed to convert credential ID to ArrayBuffer:`, e);\n            return item;\n          }\n        }\n        return item;\n      });\n    } else {\n      // Regular array processing\n      return obj.map((item, index) => convertOptionsToBuffer(item, [...path, index.toString()]));\n    }\n  } else if (obj !== null && typeof obj === 'object') {\n    const newObj: any = {};\n    for (const key in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, key)) {\n        newObj[key] = convertOptionsToBuffer(obj[key], [...path, key]);\n      }\n    }\n    return newObj;\n  }\n  return obj;\n}\n\n// Deeply converts objects with ArrayBuffers to Base64URL strings\nfunction convertResultToBase64Url(obj: any): any {\n  if (obj instanceof ArrayBuffer || obj instanceof Uint8Array) {\n    return uint8ArrayToBase64Url(obj);\n  } else if (Array.isArray(obj)) {\n    return obj.map(convertResultToBase64Url);\n  } else if (obj !== null && typeof obj === 'object') {\n    const newObj: any = {};\n    for (const key in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, key)) {\n        newObj[key] = convertResultToBase64Url(obj[key]);\n      }\n    }\n    return newObj;\n  }\n  return obj;\n}\n\n// Authentication function - returns PRF result as Promise\nexport async function authenticate(): Promise<Uint8Array> {\n  // Generate a random state parameter which will tie start and finish requests together\n  const state = crypto.randomUUID();\n\n  // Get challenge from server - uses start_discoverable_authentication\n  const resp = await fetch(`/webauthn/authenticate/start?state=${state}`, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n  });\n\n  if (!resp.ok) {\n    throw new Error(`Authentication start failed: ${resp.status} ${resp.statusText}`);\n  }\n\n  const responseData = await resp.json();\n  const options = convertOptionsToBuffer(responseData);\n\n  // Use navigator.credentials.get with discoverable auth options\n  const credential = await navigator.credentials.get({\n    publicKey: options.publicKey,\n    mediation: 'immediate' as CredentialMediationRequirement,\n  });\n\n  if (!credential) {\n    throw new Error('No credential received from authenticator');\n  }\n\n  // Convert credential to JSON format for server\n  const credentialJson = convertResultToBase64Url({\n    id: credential.id,\n    rawId: (credential as any).rawId,\n    response: {\n      authenticatorData: (credential as any).response.authenticatorData,\n      clientDataJSON: (credential as any).response.clientDataJSON,\n      signature: (credential as any).response.signature,\n      userHandle: (credential as any).response.userHandle,\n    },\n    type: credential.type,\n  });\n\n  // Send credential to server\n  const finishResp = await fetch(`/webauthn/authenticate/finish?state=${state}`, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(credentialJson),\n  });\n\n  if (!finishResp.ok) {\n    throw new Error(`Authentication finish failed: ${finishResp.status} ${finishResp.statusText}`);\n  }\n\n  // Return PRF results if available\n  const extensionResults = (credential as any).getClientExtensionResults?.();\n  if (extensionResults?.prf?.results?.first) {\n    const prfResult = new Uint8Array(extensionResults.prf.results.first);\n\n    return prfResult;\n  }\n\n  throw new Error('PRF extension result not available');\n}\n\n// Registration function\nexport async function register(username: string): Promise<Uint8Array> {\n  // Generate a random state parameter which will tie start and finish requests together\n  const state = crypto.randomUUID();\n\n  // Get challenge from server\n  const resp = await fetch(`/webauthn/register/start?state=${state}`, {\n    body: JSON.stringify({ user_name: username }),\n    headers: { 'Content-Type': 'application/json' },\n    method: 'POST',\n  });\n\n  if (!resp.ok) {\n    throw new Error(`Registration start failed: ${resp.status} ${resp.statusText}`);\n  }\n\n  const responseData = await resp.json();\n  const options = convertOptionsToBuffer(responseData);\n\n  // Use navigator.credentials.create\n  const credential = await navigator.credentials.create({\n    publicKey: options.publicKey,\n  });\n\n  if (!credential) {\n    throw new Error('No credential received from authenticator');\n  }\n\n  // Check if credential was created as discoverable (resident key)\n  const extensionResults = (credential as any).getClientExtensionResults?.();\n\n  // Convert credential to JSON format for server\n  const credentialJson = convertResultToBase64Url({\n    id: credential.id,\n    rawId: (credential as any).rawId,\n    response: {\n      attestationObject: (credential as any).response.attestationObject,\n      clientDataJSON: (credential as any).response.clientDataJSON,\n    },\n    type: credential.type,\n  });\n\n  // Send credential to server\n  const finishResp = await fetch(`/webauthn/register/finish?state=${state}`, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(credentialJson),\n  });\n\n  if (!finishResp.ok) {\n    throw new Error(`Registration finish failed: ${finishResp.status} ${finishResp.statusText}`);\n  }\n\n  // Return PRF results if available\n  if (extensionResults?.prf?.results?.first) {\n    const prfResult = new Uint8Array(extensionResults.prf.results.first);\n    return prfResult;\n  }\n\n  throw new Error('PRF extension result not available');\n}\n"],"names":["base64UrlToUint8Array","base64Url","padding","base64","raw","buffer","i","uint8ArrayToBase64Url","BASE64URL_FIELDS","ARRAY_BASE64URL_FIELDS","convertOptionsToBuffer","obj","path","fullPath","item","e","index","newObj","key","convertResultToBase64Url","authenticate","_a","_b","_c","state","resp","responseData","options","credential","credentialJson","finishResp","extensionResults","register","username"],"mappings":"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"}