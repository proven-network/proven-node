[workspace.package]
rust-version = "1.85.0"
authors = ["Proven Labs Pte Ltd"]
edition = "2024"
license = "FSL-1.1-MIT"
repository = "https://github.com/proven-network/proven-node"
version = "0.1.0"

[workspace]
resolver = "2"
members = [
    "crates/applications",
    "crates/attestation",
    "crates/attestation-mock",
    "crates/attestation-nsm",
    "crates/bootable",
    "crates/bitcoin-core",
    "crates/cert-store",
    "crates/code-package",
    "crates/core",
    "crates/dnscrypt-proxy",
    # "crates/enclave",
    "crates/engine",
    "crates/ethereum-lighthouse",
    "crates/ethereum-reth",
    "crates/external-fs",
    "crates/headers",
    "crates/host",
    "crates/http",
    "crates/http-insecure",
    "crates/http-letsencrypt",
    "crates/http-proxy",
    "crates/identity",
    "crates/imds",
    "crates/instance-details",
    "crates/isolation",
    "crates/kms",
    "crates/libsql",
    "crates/local",
    "crates/local-cli",
    "crates/local-tui",
    "crates/locks",
    "crates/locks-memory",
    "crates/logger",
    "crates/messaging",
    "crates/messaging-engine",
    "crates/messaging-memory",
    "crates/network",
    "crates/passkeys",
    "crates/postgres",
    "crates/radix-aggregator",
    "crates/radix-gateway",
    "crates/radix-gateway-sdk",
    "crates/radix-nft-verifier",
    "crates/radix-nft-verifier-gateway",
    "crates/radix-nft-verifier-mock",
    "crates/radix-node",
    "crates/radix-rola",
    "crates/radix-stream",
    "crates/runtime",
    "crates/sessions",
    "crates/sql",
    "crates/sql-direct",
    "crates/sql-streamed",
    "crates/storage",
    "crates/storage-memory",
    "crates/storage-rocksdb",
    "crates/storage-s3",
    "crates/store",
    "crates/store-asm",
    "crates/store-engine",
    "crates/store-fs",
    "crates/store-memory",
    "crates/store-s3",
    "crates/topology",
    "crates/topology-governance",
    "crates/topology-mock",
    "crates/transport",
    "crates/transport-tcp",
    "crates/transport-ws",
    "crates/util",
    "crates/verification",
    "crates/vsock-cac",
    "crates/vsock-fuse",
    "crates/vsock-proxy",
    "crates/vsock-rpc",
    "crates/vsock-tracing",
]
default-members = [
    "crates/applications",
    "crates/attestation",
    "crates/attestation-mock",
    "crates/attestation-nsm",
    "crates/bitcoin-core",
    "crates/bootable",
    "crates/cert-store",
    "crates/code-package",
    "crates/core",
    "crates/dnscrypt-proxy",
    # "crates/enclave",
    "crates/engine",
    "crates/ethereum-lighthouse",
    "crates/ethereum-reth",
    "crates/external-fs",
    "crates/headers",
    "crates/host",
    "crates/http",
    "crates/http-insecure",
    "crates/http-letsencrypt",
    "crates/http-proxy",
    "crates/identity",
    "crates/imds",
    "crates/instance-details",
    "crates/isolation",
    "crates/kms",
    "crates/libsql",
    "crates/local",
    "crates/local-cli",
    "crates/local-tui",
    "crates/locks",
    "crates/locks-memory",
    "crates/logger",
    "crates/messaging",
    "crates/messaging-engine",
    "crates/messaging-memory",
    "crates/network",
    "crates/passkeys",
    "crates/postgres",
    "crates/radix-aggregator",
    "crates/radix-gateway",
    "crates/radix-gateway-sdk",
    "crates/radix-nft-verifier",
    "crates/radix-nft-verifier-gateway",
    "crates/radix-nft-verifier-mock",
    "crates/radix-node",
    "crates/radix-rola",
    "crates/radix-stream",
    "crates/runtime",
    "crates/sessions",
    "crates/sql",
    "crates/sql-direct",
    "crates/sql-streamed",
    "crates/storage",
    "crates/storage-memory",
    "crates/storage-rocksdb",
    "crates/storage-s3",
    "crates/store",
    "crates/store-asm",
    "crates/store-engine",
    "crates/store-fs",
    "crates/store-memory",
    "crates/store-s3",
    "crates/topology",
    "crates/topology-governance",
    "crates/topology-mock",
    "crates/transport",
    "crates/transport-tcp",
    "crates/transport-ws",
    "crates/util",
    "crates/verification",
    "crates/vsock-cac",
    "crates/vsock-fuse",
    "crates/vsock-proxy",
    "crates/vsock-rpc",
    "crates/vsock-tracing",
]

[workspace.dependencies]
aead-gcm-stream = "0.4.0"
aes = "0.8.4"
aes-gcm = "0.10"
aes-kw = "0.2.1"
alloy = { version = "1.0.17", features = [
    "rpc-types",
    "consensus",
    "rlp",
    "k256",
    "provider-http",
    "sol-types",
    "network",
    "ssz",
    "json-rpc",
    "signers",
] }
alloy-sol-types = "1.2.1"
alloy-trie = "0.8.1"
anyhow = "1.0.98"
argon2 = "0.5"
asn1-rs = "0.7.1"
assert_matches = "1.5.0"
async-compression = "0.4.27"
async-once-cell = "0.5.4"
async-stream = "0.3.6"
async-trait = "0.1.87"
aws-config = { version = "1.8.2", default-features = false, features = ["behavior-version-latest", "credentials-process", "rt-tokio", "rustls"] }
aws-lc-rs = { version = "1.13.2" }
aws-lc-sys = { version = "0.30.0" }
aws-sdk-ec2 = { version = "1.147.0", default-features = false }
aws-sdk-kms = { version = "1.79.0", default-features = false }
aws-sdk-route53resolver = { version = "1.82.0", default-features = false }
aws-sdk-s3 = { version = "1.98.0", default-features = false, features = ["rt-tokio"] }
aws-sdk-secretsmanager = { version = "1.80.0", default-features = false }
axum = { version = "0.8.4", features = ["ws"] }
axum-extra = { version = "0.10.1", features = ["typed-header"] }
axum-server = { version = "0.7.1", features = ["tls-rustls-no-provider"] }
axum_typed_multipart = "0.16.3"
base32 = "=0.5.1"
base64 = "0.22.1"
base64-simd = "0.8"
bech32 = "0.11.0"
bencher = "0.1"
bilrost = "0.1013.0"
bincode = "=1.3.3"
blake2 = "0.10.6"
blake3 = "1.8.2"
block-padding = { version = "0.3.3", features = ["std"] }
bls12_381 = { git = "https://github.com/fspreiss/bls12_381", branch = "upgrade-sha-and-digest", features = ["experimental"] }
boxed_error = "0.2.3"
brotli = "=6.0.0"
bytemuck = "1.23.1"
byteorder = "1.5.0"
bytes = { version = "1.9.0", features = ["serde"] }
cache_control = "=0.2.0"
capacity_builder = "0.5.0"
cbc = { version = "=0.1.2", features = ["alloc"] }
chrono = { version = "0.4.41", features = ["serde"] }
ciborium = "0.2.2"
cidr = { version = "0.3.1", features = ["serde"] }
checksum = "0.2.1"
clap = { version = "4.5.41", features = ["derive", "env"] }
color-print = "0.3.5"
console = "0.16.0"
console_static_text = "0.8.3"
const-oid = "=0.9.6"
coset = { version = "0.3.8", features = ["std"] }
cranelift = "0.121.1"
cranelift-native = "0.121.1"
crc32fast = "1.5.0"
criterion = { version = "0.6.0", features = ["async_tokio"] }
crossbeam = { version = "0.8.4" }
ctr = { version = "0.9.2", features = ["alloc"] }
curve25519-dalek = "4.2.0"
dashmap = "6.1.0"
data-encoding = "2.9.0"
data-url = "0.3.1"
deno_ast = { version = "0.48.2", features = ["transpiling"] }
deno_bench_util = { path = "vendor/deno/bench_util" }
deno_broadcast_channel = { path = "vendor/deno/ext/broadcast_channel" }
deno_cache = { path = "vendor/deno/ext/cache" }
deno_cache_dir = "0.23.0"
deno_canvas = { path = "vendor/deno/ext/canvas" }
deno_config = { path = "vendor/deno/libs/config", features = ["workspace"] }
deno_console = { path = "vendor/deno/ext/console" }
# TODO: Enable pointer compression when prebuilts are available for ARM.
# https://github.com/denoland/rusty_v8/pull/1752
deno_core = "0.352.1"
deno_cron = { path = "vendor/deno/ext/cron" }
deno_crypto = { path = "vendor/deno/ext/crypto" }
deno_crypto_provider = { path = "vendor/deno/libs/crypto" }
deno_error = "0.6.1"
deno_features = { path = "vendor/deno/runtime/features" }
deno_fetch = { path = "vendor/deno/ext/fetch" }
deno_ffi = { path = "vendor/deno/ext/ffi" }
deno_fs = { path = "vendor/deno/ext/fs" }
deno_graph = "0.96.2"
deno_http = { path = "vendor/deno/ext/http" }
deno_io = { path = "vendor/deno/ext/io" }
deno_kv = { path = "vendor/deno/ext/kv" }
deno_lib = { path = "vendor/deno/cli/lib" }
deno_lockfile = "0.30.2"
deno_media_type = { version = "0.2.9", features = ["module_specifier"] }
deno_napi = { path = "vendor/deno/ext/napi" }
deno_native_certs = "0.3.0"
deno_net = { path = "vendor/deno/ext/net" }
deno_node = { path = "vendor/deno/ext/node" }
deno_npm = "0.35.0"
deno_npm_cache = { path = "vendor/deno/libs/npm_cache" }
deno_npm_installer = { path = "vendor/deno/libs/npm_installer" }
deno_os = { path = "vendor/deno/ext/os" }
deno_package_json = { path = "vendor/deno/libs/package_json", default-features = false }
deno_path_util = "0.4.0"
deno_permissions = { path = "vendor/deno/runtime/permissions" }
deno_process = { path = "vendor/deno/ext/process" }
deno_resolver = { path = "vendor/deno/libs/resolver" }
deno_runtime = { path = "vendor/deno/runtime" }
deno_semver = "0.8.1"
deno_subprocess_windows = { path = "vendor/deno/runtime/subprocess_windows" }
deno_telemetry = { path = "vendor/deno/ext/telemetry" }
deno_terminal = "0.2.0"
deno_tls = { path = "vendor/deno/ext/tls" }
deno_url = { path = "vendor/deno/ext/url" }
deno_unsync = "0.4.4"
deno_web = { path = "vendor/deno/ext/web" }
deno_webgpu = { path = "vendor/deno/ext/webgpu" }
deno_webidl = { path = "vendor/deno/ext/webidl" }
deno_websocket = { path = "vendor/deno/ext/websocket" }
deno_webstorage = { path = "vendor/deno/ext/webstorage" }
deno_whoami = "0.1.0"
denokv_proto = "0.11.0"
denokv_remote = "0.11.0"
# denokv_sqlite brings in bundled sqlite if we don't disable the default features
denokv_sqlite = { default-features = false, path = "vendor/denokv/sqlite" }
denort_helper = { path = "vendor/deno/ext/rt_helper" }
der = "0.7.10"
derive_more = { version = "2.0.1", features = ["display", "from"] }
digest = "0.10.7"
dissimilar = "1.0.10"
dlopen2 = "0.8.0"
dns-stamp-parser = "3.0.1"
dotenv = "0.15.0"
dotenvy = "0.15.7"
dsa = "0.6.3"
dyn-clone = "1.0.19"
ecb = "0.1.2"
ecdsa = "0.16.9"
ed25519-dalek = { version = "2.2.0", features = ["rand_core", "serde", "signature"] }
ed448-goldilocks = "0.9.0"
elliptic-curve = { version = "0.13.8", features = ["alloc", "arithmetic", "ecdh", "std", "pem", "jwk"] }
encoding_rs = "0.8.35"
env_logger = "0.11.8"
error_reporter = "1.0.0"
eszip = "0.93.0"
ethereum_ssz = "0.9.0"
ethereum_ssz_derive = "0.9.0"
eyre = "0.6.12"
fast-socks5 = "0.10.0"
faster-hex = "0.10.0"
fastrand = "2.3.0"
fastwebsockets = { version = "0.10.0", features = ["upgrade", "unstable-split"] }
fdlimit = "0.3.0"
filetime = "0.2.16"
flate2 = { version = "1.1.2", default-features = false }
fqdn = "0.4.6"
fs3 = "0.5.0"
futures = "0.3.21"
glob = "0.3.2"
h2 = "0.4.11"
headers = "0.4.1"
helios-common = { path = "vendor/helios/common" }
helios-consensus-core = { path = "vendor/helios/ethereum/consensus-core" }
helios-core = { path = "vendor/helios/core" }
helios-ethereum = { path = "vendor/helios/ethereum" }
hex = "0.4.3"
hickory-proto = { version = "=0.25.0-alpha.4", features = ["tokio-runtime"] }
hickory-resolver = { version = "=0.25.0-alpha.4", features = ["tokio-runtime", "serde"] }
hkdf = "0.12.3"
http = "1.3.1"
http-body = "1.0.1"
http-body-util = "0.1.3"
http-serde = "2.1.1"
http_v02 = { package = "http", version = "0.2.12" }
httparse = "1.10.1"
hyper = { version = "1.6.0", features = ["full"] }
hyper-rustls = { version = "0.27.7", default-features = false, features = ["aws-lc-rs", "http1", "http2", "tls12"] }
hyper-util = { version = "0.1.15", features = ["tokio", "client", "client-legacy", "server", "server-auto"] }
hyper_v014 = { package = "hyper", version = "0.14.32", features = ["runtime", "http1"] }
idna = "1.0.3"
ignore = "0.4"
image = { version = "0.25.6", default-features = false }
import_map = { version = "0.22.0", features = ["ext"] }
indexmap = { version = "2.10.0", features = ["serde"] }
ipnet = "2.11.0"
ipnetwork = "0.21.1"
itertools = "0.14.0"
junction = "1.2.0"
jsonc-parser = { version = "=0.26.2", features = ["serde"] }
k256 = "0.13.1"
lazy-regex = "3.4.1"
lazy_static = "1.4.0"
lcms2 = "6.1.1"
libffi = "4.1.1"
libffi-sys = "3.3.2"
libloading = "0.8.8"
libsql = { version = "0.9.16", default-features = false, features = ["core", "stream"] }
libsql-ffi = { version = "0.9.16", features = ["session"] }
libsql-rusqlite = { version = "0.9.16", features = ["limits"] }
libsui = "0.10.0"
libc = "0.2.174"
libuv-sys-lite = "1.48.3"
libz-sys = { version = "1.1.21", default-features = false }
log = { version = "0.4.27", features = ["kv"] }
lru = { version = "0.16.0" }
lsp-types = "=0.97.0"
maplit = "1.0.2"
md-5 = "0.10.5"
md4 = "0.10.2"
md5 = "0.8.0"
memchr = "2.7.5"
memmap2 = "0.9.7"
memmem = "0.1.1"
mime = "0.3.16"
miniz_oxide = { version = "0.8.9" }
monch = "=0.5.0"
multi_key_map = "0.3.0"
napi_sym = { path = "vendor/deno/ext/napi/sym" }
netif = "0.1.6"
nix = { version = "=0.27.1", features = ["process", "signal", "user", "mount", "sched"] }
node_resolver = { path = "vendor/deno/libs/node_resolver" }
notify = "8.1.0"
nsm-nitro-enclave-utils = { version = "0.1.2", features = ["pki", "seed", "verify"] }
num-bigint = { version = "0.4", features = ["rand"] }
num-bigint-dig = "0.8.2"
num-integer = "0.1.45"
num-traits = "0.2.19"
once_cell = "1.21.3"
op-alloy-rpc-types = "0.18.6"
openraft = { git = "https://github.com/databendlabs/openraft", tag = "v0.10.0-alpha.10", features = ["serde", "type-alias"] }
openssl = { version = "0.10.73", features = ["vendored"] }
opentelemetry = "=0.27.1"
opentelemetry-http = "=0.27.0"
opentelemetry-otlp = { version = "=0.27.0", features = ["logs", "http-proto", "http-json"] }
opentelemetry-semantic-conventions = { version = "=0.27.0", features = ["semconv_experimental"] }
opentelemetry_sdk = "=0.27.1"
os_pipe = { version = "1.2.2", features = ["io_safety"] }
p224 = { version = "0.13.0", features = ["ecdh"] }
p256 = { version = "0.13.2", features = ["ecdh", "jwk"] }
p384 = { version = "0.13.1", features = ["ecdh", "jwk"] }
p521 = "0.13.3"
path-clean = "1.0.1"
pathdiff = "0.2.1"
parking_lot = "0.12.4"
paste = "1.0.15"
pbkdf2 = "0.12.1"
pem = "3.0.5"
percent-encoding = "2.3.0"
phf = { version = "0.12.1", features = ["macros"] }
pin-project = "1.1.10"
pin-project-lite = "0.2.13"
pkcs8 = "0.10.2"
pretty_assertions = "1.4.1"
prettyplease = "0.2.35"
progenitor = "0.11.0"
progenitor-client = "0.11.0"
prometheus = { version = "0.14.0" }
proptest = "1.7.0"
prost = "=0.13.5"
prost-build = "=0.13.5"
proven-applications = { path = "crates/applications" }
proven-attestation = { path = "crates/attestation" }
proven-attestation-mock = { path = "crates/attestation-mock" }
proven-attestation-nsm = { path = "crates/attestation-nsm" }
proven-bitcoin-core = { path = "crates/bitcoin-core" }
proven-bootable = { path = "crates/bootable" }
proven-cert-store = { path = "crates/cert-store" }
proven-code-package = { path = "crates/code-package" }
proven-core = { path = "crates/core" }
proven-dnscrypt-proxy = { path = "crates/dnscrypt-proxy" }
# proven-enclave = { path = "crates/enclave" }
proven-engine = { path = "crates/engine" }
proven-ethereum-lighthouse = { path = "crates/ethereum-lighthouse" }
proven-ethereum-reth = { path = "crates/ethereum-reth" }
proven-external-fs = { path = "crates/external-fs" }
proven-headers = { path = "crates/headers" }
proven-host = { path = "crates/host" }
proven-http = { path = "crates/http" }
proven-http-insecure = { path = "crates/http-insecure" }
proven-http-letsencrypt = { path = "crates/http-letsencrypt" }
proven-http-proxy = { path = "crates/http-proxy" }
proven-identity = { path = "crates/identity" }
proven-imds = { path = "crates/imds" }
proven-instance-details = { path = "crates/instance-details" }
proven-isolation = { path = "crates/isolation" }
proven-kms = { path = "crates/kms" }
proven-libsql = { path = "crates/libsql" }
proven-local = { path = "crates/local" }
proven-local-cli = { path = "crates/local-cli" }
proven-local-tui = { path = "crates/local-tui" }
proven-locks = { path = "crates/locks" }
proven-locks-memory = { path = "crates/locks-memory" }
proven-logger = { path = "crates/logger", features = ["log-compat", "release-max-level-info", "tracing-compat"] }
proven-messaging = { path = "crates/messaging" }
proven-messaging-engine = { path = "crates/messaging-engine" }
proven-messaging-memory = { path = "crates/messaging-memory" }
proven-network = { path = "crates/network" }
proven-passkeys = { path = "crates/passkeys" }
proven-postgres = { path = "crates/postgres" }
proven-radix-aggregator = { path = "crates/radix-aggregator" }
proven-radix-gateway = { path = "crates/radix-gateway" }
proven-radix-gateway-sdk = { path = "crates/radix-gateway-sdk" }
proven-radix-nft-verifier = { path = "crates/radix-nft-verifier" }
proven-radix-nft-verifier-gateway = { path = "crates/radix-nft-verifier-gateway" }
proven-radix-nft-verifier-mock = { path = "crates/radix-nft-verifier-mock" }
proven-radix-node = { path = "crates/radix-node" }
proven-radix-rola = { path = "crates/radix-rola" }
proven-radix-stream = { path = "crates/radix-stream" }
proven-runtime = { path = "crates/runtime" }
proven-sessions = { path = "crates/sessions" }
proven-sql = { path = "crates/sql" }
proven-sql-direct = { path = "crates/sql-direct" }
proven-sql-streamed = { path = "crates/sql-streamed" }
proven-storage = { path = "crates/storage" }
proven-storage-memory = { path = "crates/storage-memory" }
proven-transport-memory = { path = "crates/transport-memory" }
proven-storage-rocksdb = { path = "crates/storage-rocksdb" }
proven-storage-s3 = { path = "crates/storage-s3" }
proven-store = { path = "crates/store" }
proven-store-asm = { path = "crates/store-asm" }
proven-store-engine = { path = "crates/store-engine" }
proven-store-fs = { path = "crates/store-fs" }
proven-store-memory = { path = "crates/store-memory" }
proven-store-s3 = { path = "crates/store-s3" }
proven-topology = { path = "crates/topology" }
proven-topology-governance = { path = "crates/topology-governance" }
proven-topology-mock = { path = "crates/topology-mock" }
proven-transport = { path = "crates/transport" }
proven-transport-tcp = { path = "crates/transport-tcp" }
proven-transport-ws = { path = "crates/transport-ws" }
proven-util = { path = "crates/util" }
proven-verification = { path = "crates/verification" }
proven-vsock-cac = { path = "crates/vsock-cac" }
proven-vsock-fuse = { path = "crates/vsock-fuse" }
proven-vsock-proxy = { path = "crates/vsock-proxy" }
proven-vsock-rpc = { path = "crates/vsock-rpc" }
proven-vsock-tracing = { path = "crates/vsock-tracing" }
public-suffix = "0.1.3"
quinn = { version = "0.11.8", default-features = false }
quote = "1.0.40"
radix-common = { version = "1.3.0", features = ["secp256k1_sign_and_validate", "serde"] }
radix-transactions = { git = "https://github.com/radixdlt/radixdlt-scrypto", branch = "develop" } # Use crate after next release (deps conflict)
rand = "=0.8.5"
rand_distr = "0.5.1"
raw-window-handle = "0.6.0"
rayon = "1.8.0"
regex = "1.10.6"
reqwest = { version = "0.12.22", default-features = false, features = [
    "blocking",
    "brotli",
    "gzip",
    "hickory-dns",
    "http2",
    "multipart",
    "json",
    "rustls-tls",
    "stream",
    "socks",
] }
reqwest-middleware = { version = "0.4.2", features = ["json"] }
reqwest-retry = "0.7.0"
retri = "0.1.0"
revm = { version = "=22.0.1", default-features = false, features = ["std", "serde", "optional_block_gas_limit", "optional_eip3607", "optional_no_base_fee"] }
ripemd = "0.1.3"
rlimit = "0.10.2"
rocksdb = "0.23.0"
rsa = { version = "0.9.8", default-features = false, features = ["std", "pem", "hazmat"] } # hazmat needed for PrehashSigner in ext/node
rtnetlink = "0.17.0"
rustc-hash = "2.1.1"
rustls = { version = "0.23.29", default-features = false, features = ["aws-lc-rs", "logging", "std", "tls12"] }
rustls-pemfile = "2.2.0"
rustls-pki-types = { version = "1.12.0", features = ["std"] }
rustls-tokio-stream = "0.6.0"
rustls-webpki = { version = "0.103.4", default-features = false, features = ["aws-lc-rs", "std"] }
rustyline = "=13.0.0"
rustyscript = { path = "vendor/rustyscript", features = ["fs", "web"]}
saffron = "=0.1.0"
same-file = "1.0.6"
scopeguard = "1.2.0"
scrypt = "0.11.0"
sec1 = "0.7.3"
semver = "1.0.26"
serde = { version = "1.0.219", features = ["derive"] }
serde_bytes = "0.11.17"
serde_cbor = "0.11.2"
serde_json = "1.0.140"
serde_yaml = "0.9.33"
serde-value = "0.7.0"
serial_test = "3.2.0"
sha1 = { version = "0.10.6", features = ["oid"] }
sha2 = { version = "0.10.9", features = ["oid"] }
sha3 = "0.10.8"
signature = "2.2.0"
simd-json = "0.15.0"
slab = "0.4.10"
sm3 = "0.4.2"
smallvec = "1.15.1"
socket2 = { version = "0.5.10", features = ["all"] }
spki = "0.7.3"
ssz_types = "0.11.0"
strip-ansi-escapes = "0.2.1"
superstruct = "0.10.0"
syn = { version = "2.0.104", features = ["full", "extra-traits"] }
sys_traits = "0.1.17"
systemctl = "0.5.0"
tar = "0.4.44"
# temporarily using until https://github.com/harryfei/which-rs/pull/109 is released
temp_deno_which = { version = "0.1.0", default-features = false }
tempfile = "3.20.0"
termcolor = "1.1.3"
test_util = { package = "test_server", path = "vendor/deno/tests/util/server" }
thiserror = "2.0.12"
tokio = { version = "1.46.1", features = ["full"] }
tokio-eld = "0.2.0"
tokio-metrics = { version = "0.4.3", features = ["rt"] }
tokio-rustls = { version = "0.26.2", default-features = false, features = ["aws_lc_rs", "tls12"] }
tokio-rustls-acme = { version = "0.7.1", features = ["axum"] }
tokio-socks = "0.5.1"
tokio-stream = "0.1.17"
tokio-test = "0.4.4"
tokio-tun = "0.13.2"
tokio-tungstenite = "0.27.0"
tokio-util = { version = "0.7.15", features = ["rt"] }
tokio-vsock = "0.7.1"
toml = "0.9.2"
tower = { version = "0.5.2", default-features = false, features = ["retry", "util"] }
tower-http = { version = "0.6.6", features = ["decompression-br", "decompression-gzip", "cors"] }
tower-service = "0.3.2"
tracing = "0.1.41"
tracing-panic = "0.1.2"
tracing-subscriber = "0.3.19"
tracing-test = "0.2.5"
tree_hash = "0.10.0"
tree_hash_derive = "0.10.0"
twox-hash = "2.1.1"
typenum = "1.18.0"
url = { version = "2.5.4", features = ["serde", "expose_internals"] }
urlpattern = "0.3.0"
uuid = { version = "1.17.0", features = ["serde", "v4"] }
v8_valueserializer = "0.1.1"
web-transport-proto = "0.2.6"
webauthn-rs = { git = "https://github.com/proven-network/webauthn-rs", features = ["conditional-ui", "danger-allow-state-serialisation"] }
webpki-root-certs = "1.0.1"
webpki-roots = "1.0.1"
wgpu-core = "=24.0.0"
wgpu-types = "=24.0.0"
which = "=6.0.3"
win32job = "=2.0.2"
winapi = "=0.3.9"
windows-sys = { version = "0.59.0", features = ["Win32_Foundation", "Win32_Media", "Win32_Storage_FileSystem", "Win32_System_IO", "Win32_System_WindowsProgramming", "Wdk", "Wdk_System", "Wdk_System_SystemInformation", "Win32_Security", "Win32_System_Pipes", "Wdk_Storage_FileSystem", "Win32_System_Registry", "Win32_System_Kernel"] }
yoke = { version = "0.8.0", features = ["derive"] }
x25519-dalek = "2.0.0"
x509-parser = { version = "0.17.0", features = ["ring", "verify"] }
zduny-wasm-timer = "0.2.9"
